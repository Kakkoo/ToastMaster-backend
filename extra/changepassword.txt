You should not update the state directly. Instead use this:

updateInput(evt){
const value = evt.target.value;
this.setState({ value });
}

instead of

updateInput(evt){
this.state={value: evt.target.value};
}
router.post(
  "/changePassword",
  passport.authenticate("jwt", { session: false }),
  async(req, res) => {
    const email = req.body.email;
    const oldPassword = req.body.password;
    let newPassword = req.body.newPassword;
    bcrypt.genSalt(10, (err, salt) => {
      if (err) throw err;
      bcrypt.hash(newPassword, salt, (err, hash) => {
        if (err) throw err;
        newPassword = hash;
      });
    });
    User.findOne ({ email })
      .then ((user) => {
        if (!user) {
          return res.status(404).json({ email: "User not found" });
        }
        // Check password
        var ID = user.id;
        bcrypt
          .compare (oldPassword, user.password)
          .then((isMatch) => {
            if (isMatch) {
              //User matched
            bcrypt.genSalt(10, (err, salt) => {
                if (err)
                  throw err;
                bcrypt.hash(newPassword, salt, (err, hash) => {
                  if (err)
                    throw err;
                  newPassword = hash;
                });
              });
               
            } 
            
          })
          .catch((err) => console.log(err));
         User.updateOne({ _id: ID }, { $set: { password: newPassword } }).then(
           (user) => {
             res.json(user);
           }
         );
           
      })
      .catch((err) => console.log(err));
  }
);
